3/1
・参考記事：
[入門]データベース設計まとめ
（https://qiita.com/KNR109/items/5d4a1954f3e8fd8eaae7）
・筑波大学：データベース概論
（https://ocw.tsukuba.ac.jp/course/systeminformation/database-systems-i/）
・「達人に学ぶDB設計徹底指南書」


=======================[データベース設計まとめ（記事）]==================================
感想：データベース設計が開発においてどこの過程で行っていくのかを最初に説明していることで、データベースの設計の
位置付けがわかりやすかった。（全体を把握した上で学ぶことができた）
正規化やER図に関しては触れたことがあったものの、言葉で説明ができていなかったので、それを言語化できるようになるために
参考になる記事だった。正規化するとデータの整合性は高まるが、検索パフォーマンスが低下するというトレードオフの関係を
学ぶことができた。
テーブル設計⇨正規化⇨ER図の順番の流れ、説明がわかりやすかった。


システム開発工程：
1. 要件定義 (システムが満たす機能やサービスの要件を決める)
2. 設計 (定義された要件を満たすための設計)
3. 開発 (設計書に沿って実際に開発)
4. テスト (実装後に本当に実用できるかをテスト)
5. 保守・運用(開発したものを運用する)
⇨データベース設計は２の工程

スキーマが三層に別れている （一つの層を変更した際に、他の層に影響を出さないようにするため）
1. ユーザー　⇨　外部スキーマ
2. 開発者　⇨　概念スキーマ
3. DBMS　⇨　内部スキーマ

開発者（概念スキーマ定義）流れ：　論理設計
1. entityの抽出
2. entityの定義
3. 正規化
4. ER図の作成
　
バックアップ設計　（わかりやすい写真：記事参照）
1. フルバックアップ
2. 差分バックアップ
3. 増分バックアップ

制約：
1. 参照制約：外部キーを設定することで、存在しないIDを登録することを防ぐ
2. NOT NULL制約: 空欄などを防ぐことができる
3. 一意制約：データの重複を防ぐことができる（メールアドレスなど）
4. CHECK制約：データの範囲を指定することができる（年齢など）

正規化：
1. 第一正規化：一つの行には一つの値が入るようにする
2. 第二正規化：部分関数従属を排除する（関数従属　y = f(x)の形にする（xが決まればyもわかる））
3. 第三正規化：推移関数従属を排除する
正規化はデータの整合性を高める一方で、
検索パフォーマンスを低下させるというトレードオフの関係を持っている。

ER図：
正規化によってテーブルの数が増えると、テーブル同士の関係の理解が難しくなる。
それを改善するためのER図。
・ER図を書くときのサイト：https://app.diagrams.net/

論理設計のアンチパターン：
1. 配列型：にしてしまうと第一正規化ができなくなるので辞める方が良さそう
2. 単一参照テーブル：
利点：①別れていたテーブルを繋げることでテーブル数が減り、ER図がシンプルに。
     ②コード検索のSQLを共通化できる
欠点：①ER図はすっきりする一方で可読性落ちる
     ②レコード数が多くなるので検索パフォーマンス低下
3. テーブル分割：テーブルを分割することで、テーブル数が増える

==========================================================================================
