第一章
・Webアプリケーションとは...
呼び出したクライアントにHTMLを返す。クライアントはHTMLをレンダリングし、ユーザーに提示。
データはHTTPを使ってクライアントに送信される
（レンダリング...データを処理することで画像や映像・テキストなどを表示させること）

・安全なリクエストメソッド（サーバーが情報の提供のみ行い、他のことは何もしない）
GET...データの取得
HEAD...データの取得（ヘッダーのみ）
OPTIONS...サポートされているメソッドの確認
TRACE...リクエストのループバックテスト

・安全でないリクエストメソッド（サーバーが情報の提供以外にも何かを行う）
POST...データの送信
PUT...データの置き換え
DELETE...データの削除

・HTTPステータスコード
1xx...処理中
2xx...成功　（200 okとか　）
3xx...リダイレクト（リクエストは受付られ処理したが、クライアントがすべきことが残っている）
4xx...クライアントエラー（404 Not Foundなど）
5xx...サーバーエラー　（ 500 Internal Server Errorなど）
（https://www.itmanage.co.jp/column/http-www-request-response-statuscode/#anc004）

・URLは単一の文字列でなければならず、空白は含まれない
（空白を入れたい場合はASCIIの32、URLエンコーディングは１６進数で表し、その前に「％」をつけるので
空白文字のURLエンコーディングは％20となる）

・Webアプリの構成
1. HTTPを介し、HTTPリクエストメッセージの形でクライアントから入力を受け取る
2. HTTPリクエストを処理し、データベースにアクセスする
3. データベースからデータを取得し、HTMLを生成する
4. HTMLをHTTPレスポンスメッセージの形でクライアントに送信する

・MVCモデル（Webアプリケーションを作成するときによく使われる）
M...Model（データベース）
V...View（サーバーから返されるHTML）
C...Controller（ユーザーからの入力によってモデルを変えていくもの）
（modelが変更されるとビューは自動的に更新される）


第二章
・クライアントから受け取ったリクエストを「マルチプレクサ」が受け取り、URLを調べ、所定のハンドラに
リダイレクトする

・テンプレートエンジンはデータとテンプレートを組み合わせてHTMLを生成する
（現段階、htmlファイルを３つ作成している。①layout.html　②navbar.html ③index.html）
layout.html...②と③を組み合わせているため、①のみを変更すれば全体のデザインを変更できる
実行自体もlayout.htmlのみで良さそう
