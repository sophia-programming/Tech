第一章
・Webアプリケーションとは...
呼び出したクライアントにHTMLを返す。クライアントはHTMLをレンダリングし、ユーザーに提示。
データはHTTPを使ってクライアントに送信される
（レンダリング...データを処理することで画像や映像・テキストなどを表示させること）

・安全なリクエストメソッド（サーバーが情報の提供のみ行い、他のことは何もしない）
GET...データの取得
HEAD...データの取得（ヘッダーのみ）
OPTIONS...サポートされているメソッドの確認
TRACE...リクエストのループバックテスト

・安全でないリクエストメソッド（サーバーが情報の提供以外にも何かを行う）
POST...データの送信
PUT...データの置き換え
DELETE...データの削除

・HTTPステータスコード
1xx...処理中
2xx...成功　（200 okとか　）
3xx...リダイレクト（リクエストは受付られ処理したが、クライアントがすべきことが残っている）
4xx...クライアントエラー（404 Not Foundなど）
5xx...サーバーエラー　（ 500 Internal Server Errorなど）
（https://www.itmanage.co.jp/column/http-www-request-response-statuscode/#anc004）

・URLは単一の文字列でなければならず、空白は含まれない
（空白を入れたい場合はASCIIの32、URLエンコーディングは１６進数で表し、その前に「％」をつけるので
空白文字のURLエンコーディングは％20となる）

・Webアプリの構成
1. HTTPを介し、HTTPリクエストメッセージの形でクライアントから入力を受け取る
2. HTTPリクエストを処理し、データベースにアクセスする
3. データベースからデータを取得し、HTMLを生成する
4. HTMLをHTTPレスポンスメッセージの形でクライアントに送信する

・MVCモデル（Webアプリケーションを作成するときによく使われる）
M...Model（データベース）
V...View（サーバーから返されるHTML）
C...Controller（ユーザーからの入力によってモデルを変えていくもの）
（modelが変更されるとビューは自動的に更新される）


第二章
・クライアントから受け取ったリクエストを「マルチプレクサ」が受け取り、URLを調べ、所定のハンドラに
リダイレクトする

・テンプレートエンジンはデータとテンプレートを組み合わせてHTMLを生成する
（現段階、htmlファイルを３つ作成している。①layout.html　②navbar.html ③index.html）
layout.html...②と③を組み合わせているため、①のみを変更すれば全体のデザインを変更できる
実行自体もlayout.htmlのみで良さそう

・構造体とデータベース間のやりとりが必要になるたびに関数を作成

Webアプリケーションの全体の流れ
1. クライアントがサーバーにリクエストを送る
2. マルチプレクサが受信し、適切なハンドラにリダイレクトする
3. ハンドラがリクエストを処理
4. データが必要な場合、データベース内のデータをモデル化したデータ構造体を使用
5. モデルはデータベースと接続。データベースからデータを取得し、データ構造体に格納
6. 処理が完了すると、ハンドラはテンプレートエンジンを起動し、場合によってモデルから
データを送信
7. テンプレートエンジンはデータとテンプレートを組み合わせてHTMLを生成
8. ハンドラはHTMLをクライアントに送信


第三章（net/httpライブラリを使用してサーバー起動）
p.60のnet/httpライブラリの図がとてもわかりやすい
・net/httpライブラリはクライアントとサーバーの二つに分かれている
・Go言語はWebアプリケーションを作成するための標準ライブラリ一式を提供している
・HTTPSによるサービス（クレジットカード情報やユーザーがログインする必要のあるサイトを計画している場合）
→ListenAndServeTLS関数を使用する
・SSL・TLSの参考文献　https://www.sslcerts.jp/
①クライアントがサーバーにリクエストを出すと、サーバーから証明書が返される。
②クライアントは証明書を検証し、問題がなければランダムな鍵を生成し、証明書に記載されている公開鍵を使って暗号化
③サーバーは秘密鍵を使って復号化し、クライアントとの通信に使用する鍵を生成


第四章
・クッキーの処理
Cookies構造体内にExpiresフィールドが設定されていない場合、そのクッキーはブラウザを閉じると同時に削除される
 有効期限の指定方法は２通り。
①Expiresフィールドにtime.Time型の値を設定する方法。
②RawExpiresフィールドに秒単位の数値を設定する方法。

https://rakko.tools/tools/24/
Base64とは？
64種類の英数字のみを使い、それ以外の文字を扱うことの出来ない環境でデータを扱うためのエンコード方式。

Base64エンコードをする必要性とは？
画像などのバイナリデータを文字列に置き換えてHTMLなどに埋め込むことで、
受け取り側での誤解釈を防ぎ安全に通信し、HTTPリクエストの回数を減らすことができます。


第五章
HTMLレスポンスを生成する方法（Goの標準ライブラリを使用）
①text/template
②html/template

・テンプレートエンジンはデータとテンプレートを組み合わせてHTMLを生成する
Go言語のテンプレートエンジンを使用するには二つの手順がある
①文字列、またはテンプレートファイルを解析してテンプレート構造体を生成（template.ParseFiles()使用）
②テンプレート構造体のExecuteメソッドを呼び出し、HTMLを生成
