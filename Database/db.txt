3/1
・参考記事：
[入門]データベース設計まとめ
（https://qiita.com/KNR109/items/5d4a1954f3e8fd8eaae7）
・筑波大学：データベース概論
（https://ocw.tsukuba.ac.jp/course/systeminformation/database-systems-i/）
・「達人に学ぶDB設計徹底指南書」


=======================[データベース設計まとめ（記事）]==================================
感想：データベース設計が開発においてどこの過程で行っていくのかを最初に説明していることで、データベースの設計の
位置付けがわかりやすかった。（全体を把握した上で学ぶことができた）
正規化やER図に関しては触れたことがあったものの、言葉で説明ができていなかったので、それを言語化できるようになるために
参考になる記事だった。正規化するとデータの整合性は高まるが、検索パフォーマンスが低下するというトレードオフの関係を
学ぶことができた。
テーブル設計⇨正規化⇨ER図の順番の流れ、説明がわかりやすかった。


システム開発工程：
1. 要件定義 (システムが満たす機能やサービスの要件を決める)
2. 設計 (定義された要件を満たすための設計)
3. 開発 (設計書に沿って実際に開発)
4. テスト (実装後に本当に実用できるかをテスト)
5. 保守・運用(開発したものを運用する)
⇨データベース設計は２の工程

スキーマが三層に別れている （一つの層を変更した際に、他の層に影響を出さないようにするため）
1. ユーザー　⇨　外部スキーマ
2. 開発者　⇨　概念スキーマ
3. DBMS　⇨　内部スキーマ

開発者（概念スキーマ定義）流れ：　論理設計
1. entityの抽出
2. entityの定義
3. 正規化
4. ER図の作成
　
バックアップ設計　（わかりやすい写真：記事参照）
1. フルバックアップ
2. 差分バックアップ
3. 増分バックアップ

制約：
1. 参照制約：外部キーを設定することで、存在しないIDを登録することを防ぐ
2. NOT NULL制約: 空欄などを防ぐことができる
3. 一意制約：データの重複を防ぐことができる（メールアドレスなど）
4. CHECK制約：データの範囲を指定することができる（年齢など）

正規化：
1. 第一正規化：一つの行には一つの値が入るようにする
2. 第二正規化：部分関数従属を排除する（関数従属　y = f(x)の形にする（xが決まればyもわかる））
3. 第三正規化：推移関数従属を排除する
正規化はデータの整合性を高める一方で、
検索パフォーマンスを低下させるというトレードオフの関係を持っている。

ER図：
正規化によってテーブルの数が増えると、テーブル同士の関係の理解が難しくなる。
それを改善するためのER図。
・ER図を書くときのサイト：https://app.diagrams.net/

論理設計のアンチパターン：
1. 配列型：にしてしまうと第一正規化ができなくなるので辞める方が良さそう
2. 単一参照テーブル：
利点：①別れていたテーブルを繋げることでテーブル数が減り、ER図がシンプルに。
     ②コード検索のSQLを共通化できる
欠点：①ER図はすっきりする一方で可読性落ちる
     ②レコード数が多くなるので検索パフォーマンス低下
3. テーブル分割：テーブルを分割することで、テーブル数が増える

==========================================================================================

=======================[筑波大学：データベース概論（動画）]==================================
1. データベースシステムの基本概念（１、２）
・DB：格納されているデータ
・DBMS（データベースシステム）：MySQL、PostgreSQLなどのデータベースを操作するためのソフトウェア
・データベース言語：SQL（データベースを操作するための言語）


＝＝＝＝＝＝DBMSの機能：＝＝＝＝＝＝＝
・効率のいいデータアクセス機構
1. データ格納方式
    a. ファイル編成（木構造、ハッシング）
    b. インデックス（主索引、二次索引）
2. 問い合わせ機構
    a. 問い合わせ最適化

・整合性の維持
1. ドメイン制約
2. キー制約（同じ値を入れようとするとエラーが出る）
3. 参照整合性制約（テーブル同士関連のない値が入ってきた時、エラー出る）

・機密保護
1. アクセス権限のあるユーザーによるデータの操作
2. データの暗号化
3. ビュ－を用いたアクセス制御（ユ－ザーから見えるデ－タをコントロールできる）
4. データベースサーバーへの接続制御

・同時実行制御
　トランザクション...複数のデータベース操作を一つのまとまりとして扱う
    ・ロック（lock）...データベースの同時実行制御を行うための仕組み
    ・時刻印（timestamp）など

・障害回復
1. 各種障害からのデータベース保護
2. トランザクションを単位としたデータ操作を保証（begin ~　commitまでの間でどこでエラーが起きたかログに書いてある）

上記のような利点があるのでDBMSを使用するようになった


＝＝＝＝＝＝スキーマとインスタンス＝＝＝＝＝＝＝
・スキーマ：データベースの構造（社員番号、氏名、基本給、住所など名前定義）
・インスタンス：スキーマに格納されたデータの実体（実際の名前や住所などの情報など）

DBを使用するとき、まずはスキーマ設定を行う。その後にインスタンスを定義していく
通常、データベースのインスタンスは頻繁に変化するが、スキーマの変化速度は遅い
⇨形の良いスキーマを準備しておくことが大切

・抽象化の３レベル（ANSI／SPARCモデル（アーキテクチャ））
1. 外部スキーマ（ユーザーが見るデータの構造（View））（概念スキーマに記載されているような個人情報は外部データでは記載されない）
2. 概念スキーマ（データの論理的な構造）(通常、データベーススキーマと言われたらこれを指す)
3. 内部スキーマ（物理的なデータの格納方法）
⇨データ独立性を保つために、３つのスキーマを分けている
例）
論理的データ独立性：属性名の変更、追加、リレ－ションの追加（外部、概念スキーマ）
物理的データ独立性：ファイル編成の変更、索引の追加・削除（内部スキーマ）
これを分けることで物理データの変更があってもファイル名とかを全て変更する！！みたいなことをしなくてもいいので便利


＝＝＝＝＝＝データベース言語＝＝＝＝＝＝＝
・DDL（データ定義言語）：データベースの構造を定義するための言語（CREATE、ALTER、DROP）⇨スキーマの変更
・DML（データ操作言語）：データベースのデータを操作するための言語（SELECT、INSERT、UPDATE、DELETE）⇨インスタンスの変更
・DCL（データ制御言語）：データベースのデータを制御するための言語（GRANT、REVOKE）⇨アクセス権限の変更など
・データベース言語
・問い合わせ言語（query language）
例）SQL（Structured Query Language）
　SELECT 社員番号, 氏名 FROM 社員 WHERE 部署番号 = 10;

==========================================================================================
3. データモデル
・データモデル：データベースの構造を記述するためのモデル
