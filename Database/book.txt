2024/3/3
[達人に学ぶDB設計徹底指南書]
＝＝＝＝＝＝＝＝＜第一章＞＝＝＝＝＝＝＝＝ー
・データベース設計を考える際、データベースを
1.外部スキーマ 
2.概念スキーマ
3.内部スキーマ
の３層に分けて考える。

主なデータベース
・Oracle Database
・SQL Server
・DB2
・PostgreSQL
・MySQL


＝＝＝＝＝＝＝＝＜第二章＞論理設計と物理設計＝＝＝＝＝＝
・論理設計
1. エンティティの抽出
2. エンティティの定義
3. 正規化
4. ER図

・物理設計
1. テーブル定義 
2. インデックス定義
3. ハードウェアのサイジング（大きさを決める）
4. ストレージの冗長構成決定
5. ファイルの物理配置決定

サイジング：
キャパシティとパフォーマンスの二つの観点から行う
⇨必ず実施時には余裕を持たせたサイジングをすること、スケーラビリティ（不足になった場合に拡張できるようにする）の高い構成を組む
データベースの性能問題の８割はディスクI/Oによって起きる

ストレージの冗長構成：
RAID（レイド）⇨複数のディスクを束ねて仮想的に一つのストレージとする技術
データベースの物理設計において
⇨当該データは信頼性が求められるのか、性能が求められるのか
⇨どのようなレベルのRAIDを採用するのか
⇨何本のディスクでRAIDを構成するのか

種類主に４つ
1.RAID０　⇨ 別名ストライピング。データを異なるディスクに分散して保持（ディスクのうち一本でも故障したらデータは失われる）
2.RAID１　⇨　別名ミラーリング。２本のディスクに全く同じデータを保持
3.RAID５　⇨ パリティ分散と呼ばれる方式。最低３本で構成（図を見た方がわかりやすいp.45）
4.RAID１０⇨RAID０とRAID１を組み合わせたもの。RAID１の高信頼性とRAID０の高速性を両立。欠点はコストが高いこと（ディスクの本数が多い（少なくとも４本））

データベースのRAIDは少なくともRAID５で構成する。お金に余裕があればRAID１０。RAID０は論外。

ファイルの物理配置：（p.51の図がわかりやすい）
1.データファイル　⇨SQLを通じて参照や更新を行うファイル
2.インデックスファイル
3.システムファイル⇨DBMSの内部管理用に使われるデータを格納。基本的にユーザーや開発者がアクセスすることはない
4.一時ファイル
5.ログファイル

バックアップ設計：
1.フルバックアップ
2.差分バックアップ
3.増分バックアップ

・バックアップ方式は「フルバックアップ＋差分バックアップ」または「フルバックアップ＋増分バックアップ」が一般的。
・障害復旧の手順
⇨フルバックアップのファイルをデータベースに戻す（リストア）
⇨差分または増分バックアップしていたトランザクションログを適用（リカバリ）
⇨データベースサーバーに残っているトランザクションログ適用（ロールフォワード）


＝＝＝＝＝＝＝＝＜第三章＞論理設計と正規化＝＝＝＝＝＝
・テーブルは重複レコードを持ってはいけない
⇨主キーはテーブルに必ず一つは存在しなければならない（主キーがない＝重複行を許す）
・外部キーの役割：テーブルに対して一種の「制約」を課すこと。「参照整合性制約」
外部キーが設定されている場合、データの削除は子から順に操作するのが良さそう（外部キーは親子関係と同じ）
・キーとなる列にはコードやIDなど表記体系の定まった固定長文字列を用いる

・正規化の逆操作は結合。⇨SQLでデータを扱う
正規化の３つのポイント
1.正規化とは更新時の不都合、不整合を排除するために行われる
2.正規化は従属性を見抜くことで可能になる
3.正規化はいつでも非正規化に戻せる（SQLでjoinする）

正規化は常にするべき？
・基本第３正規化までは原則として行う

利点：データの冗長性が排除され、更新時の不整合を防止できる
テーブルの持つ意味が明確になり、開発者が理解しやすい
欠点：テーブルの数が増えるのでSQL分で結合を多用することになり、パフォーマンス低下


